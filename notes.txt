"@" is ruby variables eg:
  ```
    @number = 13
  ```
  you can overwrite the first variable by assign a new one

  ```
    @number = 14
  ```
  can also hold string

  ```
    @username = "Rikloman" + "admin"
  ```

  variable can also hold 'symbol' which cant be changed

  ```
  @method = :delete
  ```

  variable can also hold list

  ```
    @shopping_list = ["eggs", "bacon", "sausages"]
  ```

Hash is like a list but slightly different, it describe one thing instead (singular). Think of it like a js object.

  ```
    @person = { first_name: "Rik", age:33, shopping:["eggs"]}
  ```
  ```
    @link = {method: :delete}
  ```

--------------------------------------------------------------------------------

Thinking about features as code
  Reviews
    - A user can review a restaurant
    - Anon users can't add a review
    - Anon users can see reviews
    - Anon users can't edit reviews
    - Anon can't delete anything
    - Any users can search and filter
    - A user can edit their own review within an hour
    - A user can't edit other people's reviews
    - A user can delete their own review
    - A user can't delete other people's reviews

  What is a review?
    - Title
    - Body
    - Score (number from 0 to 10)
    - User
    - Restaurant name & location
    - Price rating($, $$, $$$, $$$$)
    - Cuisine

  MVC
    - Model (database model of Reviews)
    - View (HTML of content - page)
    - Controller (URL definition - find the and merge models and views)

  Pages for reviews (rails convention)
    - list (index)
    - Individual review page (show)
    - New review page (new)
    - Edit review page (edit)

  adding a new Controller
  ``` rails generate controller [name with plurals e.g reviews]```

--------------------------------------------------------------------------------

Setting up our first page
  - Inside routes.rb, update the following text to as follows
    ```
      Rails.application.routes.draw do
        #resources is a rails convention - generated a controller called reviews
        resources :reviews
        #this is where the homepage goes (app/controllers/reviews_controller.rb)
        root "reviews#index"
      end
    ```
  - Inside 'app/controllers/reviews_controller.rb' update the following
    ```
      class ReviewsController < ApplicationController

        # def is function in ruby. Telling that the index page coming from app/views/reviews/index.html.erb
        def index
          # this is our list page for our review
        end

      end
    ```
  - inside 'app/views/reviews/index.html.erb' update the following
    ```
      <h1>Bien Reviews</h1>
      <h2>The best reviews in the world</h2>

    ```

Adding variables to views
  - Inside 'app/controllers/reviews_controller.rb' we can add dynamic content. add it inside 'def index....'
    ```
      # def is function in ruby. Telling that the index page coming from app/views/reviews/index.html.erb
      def index
        # this is our list page for our review
        # rand([enter number between 0-100]) is a ruby random number function.
        @number =  rand(100)
      end
    ```
  - We can then call the variable in the view: 'app/views/reviews/index.html.erb'
    ```
      <p> the random number is <%= @number %></p>
    ```

--------------------------------------------------------------------------------

Models is where we can add validation to rails. https://guides.rubyonrails.org/active_record_validations.html

 - active record validation is where ruby check data.
 - inside 'app/models/review.rb' you can add the following:

 ```
   class Review < ApplicationRecord
     #adding some validations
     validates :title, presence: true
     validates :body, length: {minimum: 10}
     validates :score, numericality: {only_integer: true, greater_than_or_equal_to: 0, less_than_or_equal_to: 10}
   end
 ```
 - 'validates' takes items is the field (as symbol) its validating.


--------------------------------------------------------------------------------

Fixing controllers for validations
 - Once validation is added into model, we now need to create user warning.
 - inside 'app/controllers/reviews_controller.rb', we need to change our "def create"
    ```
      # we can to check if the model can be saved, if it is, we're go to home page again, if it isn't show the form
      if @review.save
        redirect_to root_path
      else
        # show the view for new.html.erb
        render "new"
      end
    ```

--------------------------------------------------------------------------------

Adding errors to our views
  - One of the way to show this in inside 'view' folder, in this example 'app/views/reviews/_form.html.erb'
  - add validation box html like below
  - using ruby if, it will loop through each validation
    ```
    <!-- using rails method of validation -->
    <% if @review.errors.any? %>
      <% @review.errors.full_messages.each do |message| %>
        <p>
          <%= message %>
        </p>
      <% end %>
    <% end %>
    ```
  - the message will display based on the model validate specified in 'app/models/review.rb'

--------------------------------------------------------------------------------

Using to_param to make SEO-friendly URLs

 - We can override default urls to be SEO friendly inside app/models/review.rb
   ```
      #changing the to_prarams default, take the ID and change it to string (title friendly url)
      def to_param
        id.to_s + "-" + title.parameterize
      end
   ```

--------------------------------------------------------------------------------

Adding page titles with content_for

  - We can easily make content detail page changes dynamically by doing the following
  - Using this special ruby tag, we can grab from certain views (show/new.html.erb).
  - first, we go to 'app/views/layouts/application.html.erb', open '<title>' since this shows everywhere on the site
    ```
      <title> <%= content_for :page_title %> - SuperhiBien </title>
    ```
  - Now create a 'ruby symbol' inside 'app/views/reviews/show.html.erb' (top of the page)
    ```
      <!-- Define it here, so this will print out on the application.html.erb -->
      <% content_for :page_title, @review.title %>
    ```
  - for views that might have a variable to put, we can do the following app/views/reviews/new.html.erb
    ```
      <!-- dont print out coz we going to print elsewhere -->
      <% content_for :page_title, "Add a new review" %>
    ```

--------------------------------------------------------------------------------

Adding new database fields with migrations
https://edgeguides.rubyonrails.org/active_record_migrations.html

 - We can find out what's in our database by 'db/schema.rb'
 - Remember DO NOT EDIT this.
 - What we should do instead is add a migration, located inside 'db/migrate'
 - so go to command and run the following
   ```
     rails generate migration [name of migration] i.e add_new_info_to_review
   ```
 - it will then generate another db file, inside it we add the following code in between 'def change'
   ```
    def change
      add_column :reviews, :phone_number, :string
      add_column :reviews, :ambiance, :string
    end
   ```
  - So it will like as follow:
    add_column :[name of table], :[name of field], :[type of field]

  - Remember to always double check and save. Its easier than having to re-do the whole process
  - Once ok, go back to the terminal and run
    ```
      rails db:migrate
    ```
  - To double check whether the migration is successful, you can go to 'db/schema.rb', it should just update itself

  - You can now add validation model inside 'review.rb' and view 'app/views/reviews/_form.html.erb'

  - also dont forget to update controller 'app/controllers/reviews_controller.rb'
    ```
      # creating a new function that will hold templated function
      def form_params
        params.require(:review).permit(:title, :restaurant, :body, :score, :ambiance)
      end
    ```
  - in order to display the new fields in detail view, dont forget to update here too: 'app/views/reviews/show.html.erb'

--------------------------------------------------------------------------------

How to add filter params

  - Inside 'app/controllers/reviews_controller.rb' you can filter by using query parameter in the url

    ```
      # def is function in ruby. Telling that the index page coming from app/views/reviews/index.html.erb
      def index
        # this is our list page for our review
        # variable is @.
        # creating a filter variable for price
        @price = params[:price]
        #creating a filter variable for cuisine
        @cuisine = params[:cuisine]

        #filtering properly by get all the reviews "Review" model from the database
        #creating new review variable as ruby list[]
        #@reviews = ["The Smile", "Baby Bo's", "Chipotle", "nandos"]
        @reviews = Review.all

        # filtering by price. this will toggle on/off depend when it has filter
        if @price.present?
          #take all of the review we have and replace the original review with filtered ones
          # find the value of the price in db that matches the param above
          @reviews = @reviews.where(price: @price)
        end

        #filter by cuisine
        if @cuisine.present?
          @reviews = @reviews.where(cuisine: @cuisine)
        end
      end

    ```
    - we can now set some links in rails that acts as a filter, add it inside 'app/views/reviews/index.html.erb'
      ```
        <!-- adding links that matches price based on query params (controller) -->
        <nav class="filters">
          <%= link_to "All prices", root_path %>
          <%= link_to "$", root_path(price: 1) %>
          <%= link_to "$$", root_path(price: 2) %>
          <%= link_to "$$$", root_path(price: 3) %>
        </nav>
      ```
